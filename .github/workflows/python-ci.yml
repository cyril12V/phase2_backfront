# .github/workflows/python-ci.yml

name: Python Backend CI # Nom du workflow affiché sur GitHub Actions

on: # Déclencheurs du workflow
  push: # Se déclenche sur les push vers ces branches
    branches: [ "main", "master", "develop" ] # Adapte selon tes noms de branches
  pull_request: # Se déclenche sur les pull requests vers ces branches
    branches: [ "main", "master", "develop" ]

jobs: # Les tâches à exécuter
  build-and-test: # Nom de la tâche (peut être ce que tu veux)
    runs-on: ubuntu-latest # Utilise la dernière version d'Ubuntu fournie par GitHub

    steps: # Les étapes séquentielles de la tâche
    - name: Checkout code # Étape 1: Récupère le code du dépôt
      uses: actions/checkout@v4 # Action standard de GitHub
      with:
          lfs: true # <<< AJOUTE ÇA
          
    - name: Set up Python # Étape 2: Configure l'environnement Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Utilise la même version que ton Dockerfile ou une version compatible
        cache: 'pip' # Met en cache les dépendances pour accélérer les builds futurs

    - name: Install dependencies # Étape 3: Installe les dépendances Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Optionnel : Étape de Linting (vérifie le style du code)
    # - name: Lint with flake8
    #   run: |
    #     pip install flake8
    #     # Stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Pytest # Étape 4: Exécute les tests
      run: |
        # Crée le dossier de données de test même s'il est vide, pour éviter les erreurs dans test_api.py
        mkdir -p tests/test_data
        # Crée également le dossier models pour éviter les erreurs lors des tests
        mkdir -p models
        # Configure l'environnement pour indiquer qu'on est en mode test
        export TESTING=true
        pytest

    # Optionnel : Étape de Build Docker (vérifie que l'image build)
    # - name: Build Docker image
    #   run: |
    #     docker build -t optical-factory-backend-ci .